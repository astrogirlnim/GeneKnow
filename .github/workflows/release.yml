name: 🚀 Release Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'desktop/**'
      - 'langgraph/**'
      - '.github/workflows/release.yml'
      - 'package.json'
      - 'README.md'
      - '*.py'
      - 'requirements.txt'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  RUST_VERSION: '1.88.0'
  PNPM_VERSION: '10.12.1'

jobs:
  # 🏷️ Version Management
  version:
    name: 🏷️ Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🏷️ Calculate new version
        id: version
        run: |
          echo "🔍 Using current version..."
          
          # Get current version from tauri.conf.json (primary source)
          CURRENT_VERSION=$(cat desktop/src-tauri/tauri.conf.json | jq -r '.version')
          echo "📋 Current version from tauri.conf.json: $CURRENT_VERSION"
          
          # Verify consistency with package.json
          PACKAGE_VERSION=$(cat desktop/ui/package.json | jq -r '.version')
          echo "📋 Package.json version: $PACKAGE_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "⚠️  Version mismatch detected!"
            echo "Using tauri.conf.json version: $CURRENT_VERSION"
          fi
          
          # For now, use current version (can be enhanced later)
          NEW_VERSION=$CURRENT_VERSION
          NEW_TAG="v$NEW_VERSION"
          
          echo "🎯 Version: $NEW_VERSION"
          echo "🏷️ Tag: $NEW_TAG"
          
          # Generate changelog
          CHANGELOG=$(cat << EOF
          ## 🧬 GenePredict Release $NEW_VERSION
          
          ### 📋 What's New
          - Automated release build for desktop application
          - Cross-platform builds (macOS, Windows, Linux)
          - Privacy-first genomic risk assessment platform
          
          ### 🔨 Technical Details
          - **Version**: $NEW_VERSION
          - **Tauri**: 2.6.2
          - **React**: 19.1.0
          - **TypeScript**: 5.8.3
          
          ### 📦 Download
          Choose the appropriate installer for your platform below.
          EOF
          )
          
          # Set outputs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🧹 Clean up existing release if exists
        run: |
          echo "🧹 Checking for existing release..."
          if gh release view ${{ steps.version.outputs.tag }} >/dev/null 2>&1; then
            echo "⚠️  Release ${{ steps.version.outputs.tag }} already exists. Deleting..."
            gh release delete ${{ steps.version.outputs.tag }} --yes
            echo "✅ Existing release deleted"
          else
            echo "✅ No existing release found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Create git tag (local)
        run: |
          echo "📤 Creating local git tag..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Delete existing tag if it exists
          if git tag -l | grep -q "^${{ steps.version.outputs.tag }}$"; then
            echo "🧹 Deleting existing local tag..."
            git tag -d ${{ steps.version.outputs.tag }}
          fi
          
          git tag ${{ steps.version.outputs.tag }}
          echo "✅ Local git tag created: ${{ steps.version.outputs.tag }}"

  # 🧪 Validation & Testing
  validate:
    name: 🧪 Validation & Testing
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🔍 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🚀 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install frontend dependencies
        working-directory: desktop/ui
        run: |
          echo "📦 Installing dependencies for validation..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed"

      - name: 🔍 Run validation checks
        working-directory: desktop/ui
        run: |
          echo "🔍 Running ESLint..."
          pnpm lint
          echo "✅ ESLint passed"
          
          echo "🔍 Running TypeScript check..."
          pnpm exec tsc --noEmit
          echo "✅ TypeScript check passed"
          
          echo "🔨 Building frontend..."
          pnpm build
          echo "✅ Frontend build successful"

  # 🔨 Build Multi-Platform Release
  build:
    name: 🔨 Build Release
    needs: [version]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            name: 'Linux x64'
            emoji: '🐧'
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            name: 'Windows x64'
            emoji: '🪟'
          - os: macos-latest
            rust-target: x86_64-apple-darwin
            name: 'macOS x64'
            emoji: '🍎'

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🦀 Setup Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.platform.rust-target }}

      - name: 🚀 Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            desktop/src-tauri -> target

      - name: 🔍 Cache Tauri CLI
        uses: actions/cache@v4
        id: tauri-cli-cache
        with:
          path: |
            ~/.cargo/bin/cargo-tauri
            ~/.cargo/bin/cargo-tauri.exe
          key: ${{ runner.os }}-tauri-cli-${{ env.RUST_VERSION }}
          restore-keys: |
            ${{ runner.os }}-tauri-cli-

      - name: 📦 Install Tauri CLI
        if: steps.tauri-cli-cache.outputs.cache-hit != 'true'
        run: |
          echo "📦 Installing Tauri CLI..."
          cargo install tauri-cli --locked
          echo "✅ Tauri CLI installed successfully"

      - name: 🔍 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🚀 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔧 Install system dependencies (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          echo "🔧 Installing Linux system dependencies..."
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev
          echo "✅ Linux dependencies installed"

      - name: 📦 Install frontend dependencies
        working-directory: desktop/ui
        run: |
          echo "📦 Installing frontend dependencies..."
          pnpm install --frozen-lockfile
          echo "✅ Frontend dependencies installed"

      - name: 🔨 Build frontend
        working-directory: desktop/ui
        run: |
          echo "🔨 Building frontend for release..."
          pnpm build
          echo "✅ Frontend build completed"

      - name: 🔨 Build Tauri Release
        working-directory: desktop/src-tauri
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "${{ matrix.platform.emoji }} Building Tauri release for ${{ matrix.platform.name }}..."
          echo "🎯 Target: ${{ matrix.platform.rust-target }}"
          echo "📦 Version: ${{ needs.version.outputs.version }}"
          
          cargo tauri build --target ${{ matrix.platform.rust-target }}
          
          echo "✅ Tauri release build completed for ${{ matrix.platform.name }}"

      - name: 📂 Locate build artifacts (Unix)
        id: artifacts-unix
        if: matrix.platform.os != 'windows-latest'
        run: |
          echo "📂 Locating build artifacts..."
          echo "🔍 Searching in desktop/src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/"
          
          # Find all bundle files
          find desktop/src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/ -type f -name "*" | sort
          
          echo "✅ Build artifacts located"

      - name: 📂 Locate build artifacts (Windows)
        id: artifacts-windows
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "📂 Locating build artifacts..."
          echo "🔍 Searching in desktop/src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/"
          
          # Find all bundle files using PowerShell
          Get-ChildItem -Path "desktop/src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/" -Recurse -File | Sort-Object FullName | ForEach-Object { $_.FullName }
          
          echo "✅ Build artifacts located"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }} Build
          path: desktop/src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/
          if-no-files-found: error

      - name: 📊 Build summary
        run: |
          echo "📊 Build completed successfully for ${{ matrix.platform.name }}"
          echo "🎯 Version: ${{ needs.version.outputs.version }}"
          echo "🏷️ Tag: ${{ needs.version.outputs.tag }}"
          echo "📦 Artifacts uploaded to GitHub Actions"

  # 🚀 Create GitHub Release
  release:
    name: 🚀 Create GitHub Release
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📂 List artifacts
        run: |
          echo "📂 Downloaded artifacts:"
          find ./artifacts -type f -name "*" | sort

      - name: 🗂️ Organize artifacts by platform
        run: |
          echo "🗂️ Organizing artifacts to prevent name conflicts..."
          mkdir -p ./release-assets
          
          # Move Linux artifacts with platform prefix
          if [ -d "./artifacts/Linux x64 Build" ]; then
            echo "📦 Processing Linux artifacts..."
            find "./artifacts/Linux x64 Build" -name "*.deb" -exec cp {} ./release-assets/ \;
            find "./artifacts/Linux x64 Build" -name "*.rpm" -exec cp {} ./release-assets/ \;
            find "./artifacts/Linux x64 Build" -name "*.AppImage" -exec cp {} ./release-assets/ \;
          fi
          
          # Move Windows artifacts with platform prefix
          if [ -d "./artifacts/Windows x64 Build" ]; then
            echo "📦 Processing Windows artifacts..."
            find "./artifacts/Windows x64 Build" -name "*.msi" -exec cp {} ./release-assets/ \;
            find "./artifacts/Windows x64 Build" -name "*.exe" -exec cp {} ./release-assets/ \;
          fi
          
          # Move macOS artifacts with platform prefix
          if [ -d "./artifacts/macOS x64 Build" ]; then
            echo "📦 Processing macOS artifacts..."
            find "./artifacts/macOS x64 Build" -name "*.dmg" -exec cp {} ./release-assets/ \;
            find "./artifacts/macOS x64 Build" -name "*.app" -exec cp {} ./release-assets/ \;
          fi
          
          echo "✅ Organized release assets:"
          ls -la ./release-assets/

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: 🧬 GenePredict ${{ needs.version.outputs.version }}
          body: ${{ needs.version.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Release summary
        run: |
          echo "# 🧬 GenePredict Release ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 **Linux**: .deb and .AppImage installers" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 **Windows**: .msi and .exe installers" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 **macOS**: .dmg installer (Universal Binary)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [📄 Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📥 Download Page](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🧬 **GenePredict** - Privacy-First Genomic Risk Assessment Platform" >> $GITHUB_STEP_SUMMARY 