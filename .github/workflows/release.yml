name: üöÄ Release Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'desktop/**'
      - '.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  RUST_VERSION: '1.88.0'
  PNPM_VERSION: '10.12.1'

jobs:
  # üè∑Ô∏è Version Management
  version:
    name: üè∑Ô∏è Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: üîç Install semver for version calculation
        run: |
          echo "üîç Installing semver tool..."
          npm install -g semver
          echo "‚úÖ semver installed"

      - name: üè∑Ô∏è Calculate new version
        id: version
        run: |
          echo "üîç Calculating new version..."
          
          # Get current version from package.json
          CURRENT_VERSION=$(cat desktop/ui/package.json | jq -r '.version')
          echo "üìã Current version: $CURRENT_VERSION"
          
          # Determine version bump type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "üéØ Manual release: $VERSION_TYPE"
          else
            # Analyze commits for conventional commit patterns
            echo "üîç Analyzing commit messages for version bump..."
            COMMITS=$(git log --oneline --no-merges $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline --no-merges)
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
              VERSION_TYPE="major"
              echo "üö® Breaking changes detected - major version bump"
            elif echo "$COMMITS" | grep -q "^feat"; then
              VERSION_TYPE="minor"
              echo "‚ú® New features detected - minor version bump"
            else
              VERSION_TYPE="patch"
              echo "üêõ Patches/fixes detected - patch version bump"
            fi
          fi
          
          # Calculate new version
          NEW_VERSION=$(semver -i $VERSION_TYPE $CURRENT_VERSION)
          NEW_TAG="v$NEW_VERSION"
          
          echo "üéØ Version bump: $CURRENT_VERSION ‚Üí $NEW_VERSION ($VERSION_TYPE)"
          echo "üè∑Ô∏è New tag: $NEW_TAG"
          
          # Generate changelog
          CHANGELOG=$(cat << EOF
          ## üß¨ GenePredict Release $NEW_VERSION
          
          ### üìã What's New
          - Automated release build for desktop application
          - Cross-platform builds (macOS, Windows, Linux)
          - Privacy-first genomic risk assessment platform
          
          ### üî® Technical Details
          - **Version**: $NEW_VERSION
          - **Build Type**: $VERSION_TYPE
          - **Tauri**: 2.6.2
          - **React**: 19.1.0
          - **TypeScript**: 5.8.3
          
          ### üì¶ Download
          Choose the appropriate installer for your platform below.
          EOF
          )
          
          # Set outputs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üìù Update version files (build-only)
        run: |
          echo "üìù Updating version files to ${{ steps.version.outputs.version }} for build..."
          
          # Update package.json
          jq '.version = "${{ steps.version.outputs.version }}"' desktop/ui/package.json > desktop/ui/package.json.tmp
          mv desktop/ui/package.json.tmp desktop/ui/package.json
          
          # Update tauri.conf.json
          jq '.version = "${{ steps.version.outputs.version }}"' desktop/src-tauri/tauri.conf.json > desktop/src-tauri/tauri.conf.json.tmp
          mv desktop/src-tauri/tauri.conf.json.tmp desktop/src-tauri/tauri.conf.json
          
          # Update Cargo.toml
          sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' desktop/src-tauri/Cargo.toml
          
          echo "‚úÖ Version files updated for build (not committed)"

      - name: üì§ Create git tag (local)
        run: |
          echo "üì§ Creating local git tag..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag ${{ steps.version.outputs.tag }}
          echo "‚úÖ Local git tag created: ${{ steps.version.outputs.tag }}"

  # üß™ Validation & Testing
  validate:
    name: üß™ Validation & Testing
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: üîç Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üöÄ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install frontend dependencies
        working-directory: desktop/ui
        run: |
          echo "üì¶ Installing dependencies for validation..."
          pnpm install --frozen-lockfile
          echo "‚úÖ Dependencies installed"

      - name: üîç Run validation checks
        working-directory: desktop/ui
        run: |
          echo "üîç Running ESLint..."
          pnpm lint
          echo "‚úÖ ESLint passed"
          
          echo "üîç Running TypeScript check..."
          pnpm exec tsc --noEmit
          echo "‚úÖ TypeScript check passed"
          
          echo "üî® Building frontend..."
          pnpm build
          echo "‚úÖ Frontend build successful"

  # üî® Build Multi-Platform Release
  build:
    name: üî® Build Release
    needs: [version, validate]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            name: 'Linux x64'
            emoji: 'üêß'
            ext: '.deb'
            ext2: '.AppImage'
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            name: 'Windows x64'
            emoji: 'ü™ü'
            ext: '.msi'
            ext2: '.exe'
          - os: macos-latest
            rust-target: universal-apple-darwin
            name: 'macOS Universal'
            emoji: 'üçé'
            ext: '.dmg'
            ext2: '.app'

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: ü¶Ä Setup Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.platform.rust-target }}

      - name: üöÄ Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            desktop/src-tauri -> target

      - name: üîç Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üöÄ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üîß Install system dependencies (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          echo "üîß Installing Linux system dependencies..."
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev
          echo "‚úÖ Linux dependencies installed"

      - name: üì¶ Install frontend dependencies
        working-directory: desktop/ui
        run: |
          echo "üì¶ Installing frontend dependencies..."
          pnpm install --frozen-lockfile
          echo "‚úÖ Frontend dependencies installed"

      - name: üî® Build Tauri Release
        working-directory: desktop/src-tauri
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "${{ matrix.platform.emoji }} Building Tauri release for ${{ matrix.platform.name }}..."
          echo "üéØ Target: ${{ matrix.platform.rust-target }}"
          echo "üì¶ Version: ${{ needs.version.outputs.version }}"
          
          if [ "${{ matrix.platform.os }}" == "macos-latest" ]; then
            echo "üçé Building universal macOS binary..."
            cargo tauri build --target universal-apple-darwin
          else
            echo "üî® Building for ${{ matrix.platform.rust-target }}..."
            cargo tauri build --target ${{ matrix.platform.rust-target }}
          fi
          
          echo "‚úÖ Tauri release build completed for ${{ matrix.platform.name }}"

      - name: üìÇ Locate build artifacts
        id: artifacts
        run: |
          echo "üìÇ Locating build artifacts..."
          
          if [ "${{ matrix.platform.os }}" == "ubuntu-latest" ]; then
            DEB_FILE=$(find desktop/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb -name "*.deb" | head -1)
            APPIMAGE_FILE=$(find desktop/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage -name "*.AppImage" | head -1)
            echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT
            echo "appimage_file=$APPIMAGE_FILE" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform.os }}" == "windows-latest" ]; then
            MSI_FILE=$(find desktop/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi -name "*.msi" | head -1)
            EXE_FILE=$(find desktop/src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis -name "*.exe" | head -1)
            echo "msi_file=$MSI_FILE" >> $GITHUB_OUTPUT
            echo "exe_file=$EXE_FILE" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform.os }}" == "macos-latest" ]; then
            DMG_FILE=$(find desktop/src-tauri/target/universal-apple-darwin/release/bundle/dmg -name "*.dmg" | head -1)
            APP_FILE=$(find desktop/src-tauri/target/universal-apple-darwin/release/bundle/macos -name "*.app" | head -1)
            echo "dmg_file=$DMG_FILE" >> $GITHUB_OUTPUT
            echo "app_file=$APP_FILE" >> $GITHUB_OUTPUT
          fi
          
          echo "‚úÖ Build artifacts located"

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }} Build
          path: |
            ${{ steps.artifacts.outputs.deb_file }}
            ${{ steps.artifacts.outputs.appimage_file }}
            ${{ steps.artifacts.outputs.msi_file }}
            ${{ steps.artifacts.outputs.exe_file }}
            ${{ steps.artifacts.outputs.dmg_file }}
            ${{ steps.artifacts.outputs.app_file }}
          if-no-files-found: error

      - name: üìä Build summary
        run: |
          echo "üìä Build completed successfully for ${{ matrix.platform.name }}"
          echo "üéØ Version: ${{ needs.version.outputs.version }}"
          echo "üè∑Ô∏è Tag: ${{ needs.version.outputs.tag }}"
          echo "üì¶ Artifacts uploaded to GitHub Actions"

  # üöÄ Create GitHub Release
  release:
    name: üöÄ Create GitHub Release
    needs: [version, validate, build]
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: üìÇ List artifacts
        run: |
          echo "üìÇ Downloaded artifacts:"
          find ./artifacts -type f -name "*" | sort

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: üß¨ GenePredict ${{ needs.version.outputs.version }}
          body: ${{ needs.version.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Release summary
        run: |
          echo "# üß¨ GenePredict Release ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéâ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- üêß **Linux**: .deb and .AppImage installers" >> $GITHUB_STEP_SUMMARY
          echo "- ü™ü **Windows**: .msi and .exe installers" >> $GITHUB_STEP_SUMMARY
          echo "- üçé **macOS**: .dmg installer (Universal Binary)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [üìÑ Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [üì• Download Page](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "üß¨ **GenePredict** - Privacy-First Genomic Risk Assessment Platform" >> $GITHUB_STEP_SUMMARY 