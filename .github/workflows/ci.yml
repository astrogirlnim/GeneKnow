name: GenePredict CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  RUST_VERSION: '1.70'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        profile: minimal
        override: true
        components: rustfmt, clippy
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        # Frontend dependencies
        cd frontend && npm ci
        
        # Python dependencies
        cd ../backend/python
        pip install -r requirements.txt
        pip install flake8 mypy black isort pytest-cov
        
        # Rust security audit
        cd ../rust
        cargo install cargo-audit
        
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
      
    - name: Rust security audit
      run: |
        cd backend/rust
        cargo audit
        
    - name: Upload security audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-results
        path: backend/rust/target/audit-results.json

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
        
    - name: Run TypeScript type check
      run: |
        cd frontend
        npm run type-check
        
    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: frontend/coverage/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Rust Tests
  rust-tests:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        profile: minimal
        override: true
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: |
        cd backend/rust
        cargo fmt -- --check
        
    - name: Run Clippy
      run: |
        cd backend/rust
        cargo clippy -- -D warnings
        
    - name: Run tests
      run: |
        cd backend/rust
        cargo test --verbose
        
    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd backend/rust
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml --output-dir coverage/
        
    - name: Upload Rust test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rust-test-results-${{ matrix.os }}
        path: backend/rust/target/debug/
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: backend/rust/coverage/cobertura.xml
        flags: rust
        name: rust-coverage

  # Python Tests
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend/python
        pip install -r requirements.txt
        pip install -e .
        pip install flake8 mypy black isort pytest-cov
        
    - name: Run linting
      run: |
        cd backend/python
        flake8 genepredict/
        black --check genepredict/
        isort --check genepredict/
        
    - name: Run type checking
      run: |
        cd backend/python
        mypy genepredict/
        
    - name: Run tests
      run: |
        cd backend/python
        pytest tests/ -v --cov=genepredict --cov-report=xml --cov-report=html
        
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results
        path: backend/python/htmlcov/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/python/coverage.xml
        flags: python
        name: python-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, rust-tests, python-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        profile: minimal
        override: true
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        # Frontend
        cd frontend && npm ci
        
        # Python
        cd ../backend/python
        pip install -r requirements.txt
        pip install -e .
        
        # Rust
        cd ../rust
        cargo build --release
        
    - name: Run integration tests
      run: |
        chmod +x scripts/test-cli.sh
        ./scripts/test-cli.sh --integration-only
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: data/test/

  # Build and Package
  build:
    name: Build Application
    runs-on: ${{ matrix.os }}
    needs: [code-quality, frontend-tests, rust-tests, python-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        profile: minimal
        override: true
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend/python && pip install -r requirements.txt
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Build Tauri application
      run: |
        cd backend/rust
        cargo tauri build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          backend/rust/target/release/bundle/
          backend/rust/target/release/genepredict*
          
    - name: Create release assets
      if: github.event_name == 'release'
      run: |
        mkdir -p release-assets
        
        # Copy built artifacts
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          cp backend/rust/target/release/bundle/deb/*.deb release-assets/
          cp backend/rust/target/release/bundle/appimage/*.AppImage release-assets/
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp backend/rust/target/release/bundle/msi/*.msi release-assets/
          cp backend/rust/target/release/bundle/nsis/*.exe release-assets/
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          cp -r backend/rust/target/release/bundle/macos/*.app release-assets/
          cp backend/rust/target/release/bundle/dmg/*.dmg release-assets/
        fi
        
    - name: Upload release assets
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: release-assets-${{ matrix.os }}
        path: release-assets/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend/python
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run performance tests
      run: |
        chmod +x scripts/test-cli.sh
        ./scripts/test-cli.sh --performance
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: data/test/performance/

  # Deploy to Release
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release checksums
      run: |
        find . -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.app" | while read file; do
          sha256sum "$file" > "$file.sha256"
        done
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.deb
          **/*.AppImage
          **/*.msi
          **/*.exe
          **/*.dmg
          **/*.app
          **/*.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ GenePredict CI/CD pipeline completed successfully!"
        echo "🚀 New release deployed: ${{ github.event.release.tag_name }}"
        
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ GenePredict CI/CD pipeline failed!"
        echo "🔍 Check the logs for details"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          security-audit-results
          frontend-test-results
          rust-test-results-*
          python-test-results
          integration-test-results
          build-artifacts-*
          performance-test-results
        failOnError: false 